import { Test, TestingModule } from '@nestjs/testing';
import { AuthService } from './auth.service';
import { SupabaseService } from '../../common/supabase/supabase.service';
import { UnauthorizedException, ConflictException } from '@nestjs/common';

describe('AuthService', () => {
  let service: AuthService;
  let supabaseService: jest.Mocked<SupabaseService>;

  const mockSupabaseClient = {
    auth: {
      signUp: jest.fn(),
      signInWithPassword: jest.fn(),
      signOut: jest.fn(),
      refreshSession: jest.fn(),
      updateUser: jest.fn(),
    },
  };

  const mockSupabaseAdminClient = {
    auth: {
      admin: {
        getUserById: jest.fn(),
      },
    },
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        AuthService,
        {
          provide: SupabaseService,
          useValue: {
            getClient: jest.fn().mockReturnValue(mockSupabaseClient),
            getAdminClient: jest.fn().mockReturnValue(mockSupabaseAdminClient),
          },
        },
      ],
    }).compile();

    service = module.get<AuthService>(AuthService);
    supabaseService = module.get(SupabaseService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });

  describe('register', () => {
    it('should register a new user successfully', async () => {
      const registerDto = {
        email: 'test@example.com',
        password: 'password123',
        fullName: 'Test User',
      };

      const mockResponse = {
        data: {
          user: {
            id: 'uuid',
            email: 'test@example.com',
            created_at: '2024-12-01T10:00:00Z',
          },
        },
        error: null,
      };

      mockSupabaseClient.auth.signUp.mockResolvedValue(mockResponse);

      const result = await service.register(registerDto);

      expect(result).toEqual({
        user: mockResponse.data.user,
        message: 'Пользователь успешно зарегистрирован. Проверьте email для подтверждения.',
      });
      expect(mockSupabaseClient.auth.signUp).toHaveBeenCalledWith({
        email: registerDto.email,
        password: registerDto.password,
        options: {
          data: {
            full_name: registerDto.fullName,
          },
        },
      });
    });

    it('should throw ConflictException when user already exists', async () => {
      const registerDto = {
        email: 'test@example.com',
        password: 'password123',
        fullName: 'Test User',
      };

      const mockError = {
        message: 'User already registered',
      };

      mockSupabaseClient.auth.signUp.mockResolvedValue({
        data: null,
        error: mockError,
      });

      await expect(service.register(registerDto)).rejects.toThrow(ConflictException);
    });
  });

  describe('login', () => {
    it('should login user successfully', async () => {
      const loginDto = {
        email: 'test@example.com',
        password: 'password123',
      };

      const mockResponse = {
        data: {
          user: {
            id: 'uuid',
            email: 'test@example.com',
          },
          session: {
            access_token: 'jwt_token',
            refresh_token: 'refresh_token',
          },
        },
        error: null,
      };

      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(mockResponse);

      const result = await service.login(loginDto);

      expect(result).toEqual({
        user: mockResponse.data.user,
        session: mockResponse.data.session,
      });
    });

    it('should throw UnauthorizedException when credentials are invalid', async () => {
      const loginDto = {
        email: 'test@example.com',
        password: 'wrongpassword',
      };

      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
        data: null,
        error: { message: 'Invalid credentials' },
      });

      await expect(service.login(loginDto)).rejects.toThrow(UnauthorizedException);
    });
  });

  describe('validateUser', () => {
    it('should return user when credentials are valid', async () => {
      const email = 'test@example.com';
      const password = 'password123';

      const mockResponse = {
        data: {
          user: {
            id: 'uuid',
            email: 'test@example.com',
          },
        },
        error: null,
      };

      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(mockResponse);

      const result = await service.validateUser(email, password);

      expect(result).toEqual(mockResponse.data.user);
    });

    it('should return null when credentials are invalid', async () => {
      const email = 'test@example.com';
      const password = 'wrongpassword';

      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
        data: null,
        error: { message: 'Invalid credentials' },
      });

      const result = await service.validateUser(email, password);

      expect(result).toBeNull();
    });
  });
});
