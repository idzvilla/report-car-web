{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/common\";\nfunction TelegramSuccessComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"div\", 11);\n    i0.ɵɵelementStart(2, \"p\", 12);\n    i0.ɵɵtext(3, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u0435\\u043C \\u0432\\u0430\\u0448 \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TelegramSuccessComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"p\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nexport let TelegramSuccessComponent = /*#__PURE__*/(() => {\n  class TelegramSuccessComponent {\n    constructor(route, router, authService) {\n      this.route = route;\n      this.router = router;\n      this.authService = authService;\n      this.isLoading = true;\n      this.error = '';\n    }\n    ngOnInit() {\n      this.route.queryParams.subscribe(params => {\n        const token = params['token'];\n        if (token) {\n          this.handleTelegramAuth(token);\n        } else {\n          this.error = 'Токен авторизации не найден';\n          this.isLoading = false;\n        }\n      });\n    }\n    handleTelegramAuth(token) {\n      try {\n        // Сохраняем токен в localStorage\n        localStorage.setItem('auth_token', token);\n        // Декодируем JWT токен для получения данных пользователя\n        const payload = this.parseJwt(token);\n        // Обновляем состояние авторизации\n        this.authService.setCurrentUser({\n          id: payload.sub,\n          email: payload.email,\n          fullName: payload.fullName,\n          authProvider: payload.authProvider,\n          telegramId: payload.telegramId\n        });\n        this.isLoading = false;\n        // Перенаправляем на главную страницу через 2 секунды\n        setTimeout(() => {\n          this.router.navigate(['/']);\n        }, 2000);\n      } catch (error) {\n        console.error('Error handling Telegram auth:', error);\n        this.error = 'Ошибка при обработке авторизации';\n        this.isLoading = false;\n      }\n    }\n    parseJwt(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        throw new Error('Invalid JWT token');\n      }\n    }\n    static {\n      this.ɵfac = function TelegramSuccessComponent_Factory(t) {\n        return new (t || TelegramSuccessComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TelegramSuccessComponent,\n        selectors: [[\"app-telegram-success\"]],\n        decls: 12,\n        vars: 2,\n        consts: [[1, \"min-h-screen\", \"bg-gray-50\", \"flex\", \"items-center\", \"justify-center\"], [1, \"max-w-md\", \"w-full\", \"space-y-8\"], [1, \"text-center\"], [1, \"mx-auto\", \"h-12\", \"w-12\", \"text-green-600\"], [\"fill\", \"none\", \"stroke\", \"currentColor\", \"viewBox\", \"0 0 24 24\"], [\"stroke-linecap\", \"round\", \"stroke-linejoin\", \"round\", \"stroke-width\", \"2\", \"d\", \"M5 13l4 4L19 7\"], [1, \"mt-6\", \"text-3xl\", \"font-extrabold\", \"text-gray-900\"], [1, \"mt-2\", \"text-sm\", \"text-gray-600\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [\"class\", \"mt-4 p-4 bg-red-50 rounded-lg\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"loading-spinner\", \"mx-auto\"], [1, \"text-sm\", \"text-gray-500\", \"mt-2\"], [1, \"mt-4\", \"p-4\", \"bg-red-50\", \"rounded-lg\"], [1, \"text-sm\", \"text-red-600\"]],\n        template: function TelegramSuccessComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n            i0.ɵɵnamespaceSVG();\n            i0.ɵɵelementStart(4, \"svg\", 4);\n            i0.ɵɵelement(5, \"path\", 5);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵnamespaceHTML();\n            i0.ɵɵelementStart(6, \"h2\", 6);\n            i0.ɵɵtext(7, \" \\u0423\\u0441\\u043F\\u0435\\u0448\\u043D\\u0430\\u044F \\u0430\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F! \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"p\", 7);\n            i0.ɵɵtext(9, \" \\u0412\\u044B \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0432\\u043E\\u0448\\u043B\\u0438 \\u0447\\u0435\\u0440\\u0435\\u0437 Telegram \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(10, TelegramSuccessComponent_div_10_Template, 4, 0, \"div\", 8)(11, TelegramSuccessComponent_div_11_Template, 3, 1, \"div\", 9);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(10);\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n          }\n        },\n        dependencies: [i3.NgIf],\n        encapsulation: 2\n      });\n    }\n  }\n  return TelegramSuccessComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}