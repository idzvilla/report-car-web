{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/api/v1';\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.loadUserFromStorage();\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n        this.setUser(response.user);\n        if (response.session) {\n          localStorage.setItem('access_token', response.session.access_token);\n          localStorage.setItem('refresh_token', response.session.refresh_token);\n        }\n      }));\n    }\n    register(userData) {\n      return this.http.post(`${this.apiUrl}/auth/register`, userData).pipe(tap(response => {\n        this.setUser(response.user);\n      }));\n    }\n    logout() {\n      return this.http.post(`${this.apiUrl}/auth/logout`, {}).pipe(tap(() => {\n        this.clearUser();\n      }));\n    }\n    getProfile() {\n      return this.http.get(`${this.apiUrl}/auth/me`).pipe(tap(response => {\n        this.setUser(response.user);\n      }));\n    }\n    updateEmail(email, password) {\n      return this.http.post(`${this.apiUrl}/auth/update-email`, {\n        email,\n        password\n      });\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    isAuthenticated() {\n      return !!this.getCurrentUser();\n    }\n    setCurrentUser(user) {\n      this.setUser(user);\n    }\n    setUser(user) {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('current_user', JSON.stringify(user));\n    }\n    clearUser() {\n      this.currentUserSubject.next(null);\n      localStorage.removeItem('current_user');\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n    }\n    loadUserFromStorage() {\n      const userStr = localStorage.getItem('current_user');\n      if (userStr) {\n        try {\n          const user = JSON.parse(userStr);\n          this.currentUserSubject.next(user);\n        } catch (error) {\n          console.error('Error loading user from storage:', error);\n          this.clearUser();\n        }\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}