{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PaymentsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/v1';\n  }\n  createPayment(request) {\n    return this.http.post(`${this.apiUrl}/payments/create`, request);\n  }\n  getUserPayments() {\n    return this.http.get(`${this.apiUrl}/payments`);\n  }\n  static {\n    this.ɵfac = function PaymentsService_Factory(t) {\n      return new (t || PaymentsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PaymentsService,\n      factory: PaymentsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["PaymentsService","constructor","http","apiUrl","createPayment","request","post","getUserPayments","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/test/Documents/Apps/CarFax Web/frontend/src/app/services/payments.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Payment {\n  id: string;\n  user_id: string;\n  report_id?: string;\n  payment_type: 'single' | 'bulk';\n  amount: number;\n  stripe_payment_intent_id: string;\n  status: 'pending' | 'completed' | 'failed' | 'cancelled';\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface CreatePaymentRequest {\n  reportId?: string;\n  paymentType: 'single' | 'bulk';\n}\n\nexport interface CreatePaymentResponse {\n  clientSecret: string;\n  paymentId: string;\n  amount: number;\n  currency: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentsService {\n  private apiUrl = 'http://localhost:3000/api/v1';\n\n  constructor(private http: HttpClient) { }\n\n  createPayment(request: CreatePaymentRequest): Observable<CreatePaymentResponse> {\n    return this.http.post<CreatePaymentResponse>(`${this.apiUrl}/payments/create`, request);\n  }\n\n  getUserPayments(): Observable<Payment[]> {\n    return this.http.get<Payment[]>(`${this.apiUrl}/payments`);\n  }\n}\n"],"mappings":";;AA+BA,OAAM,MAAOA,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,8BAA8B;EAEP;EAExCC,aAAaA,CAACC,OAA6B;IACzC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAwB,GAAG,IAAI,CAACH,MAAM,kBAAkB,EAAEE,OAAO,CAAC;EACzF;EAEAE,eAAeA,CAAA;IACb,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAY,GAAG,IAAI,CAACL,MAAM,WAAW,CAAC;EAC5D;;;uBAXWH,eAAe,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfZ,eAAe;MAAAa,OAAA,EAAfb,eAAe,CAAAc,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}