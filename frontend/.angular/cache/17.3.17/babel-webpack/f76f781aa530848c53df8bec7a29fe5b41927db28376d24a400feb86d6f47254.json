{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/v1';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/auth/login`, credentials).pipe(tap(response => {\n      this.setUser(response.user);\n      if (response.session) {\n        localStorage.setItem('access_token', response.session.access_token);\n        localStorage.setItem('refresh_token', response.session.refresh_token);\n      }\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/auth/register`, userData).pipe(tap(response => {\n      this.setUser(response.user);\n    }));\n  }\n  logout() {\n    return this.http.post(`${this.apiUrl}/auth/logout`, {}).pipe(tap(() => {\n      this.clearUser();\n    }));\n  }\n  getProfile() {\n    return this.http.get(`${this.apiUrl}/auth/me`).pipe(tap(response => {\n      this.setUser(response.user);\n    }));\n  }\n  updateEmail(email, password) {\n    return this.http.post(`${this.apiUrl}/auth/update-email`, {\n      email,\n      password\n    });\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  isAuthenticated() {\n    return !!this.getCurrentUser();\n  }\n  setCurrentUser(user) {\n    this.setUser(user);\n  }\n  setUser(user) {\n    this.currentUserSubject.next(user);\n    localStorage.setItem('current_user', JSON.stringify(user));\n  }\n  clearUser() {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('current_user');\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n  loadUserFromStorage() {\n    const userStr = localStorage.getItem('current_user');\n    if (userStr) {\n      try {\n        const user = JSON.parse(userStr);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        console.error('Error loading user from storage:', error);\n        this.clearUser();\n      }\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","loadUserFromStorage","login","credentials","post","pipe","response","setUser","user","session","localStorage","setItem","access_token","refresh_token","register","userData","logout","clearUser","getProfile","get","updateEmail","email","password","getCurrentUser","value","isAuthenticated","setCurrentUser","next","JSON","stringify","removeItem","userStr","getItem","parse","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/test/Documents/Apps/CarFax Web/frontend/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nexport interface User {\n  id: string;\n  email?: string;\n  fullName: string;\n  createdAt?: string;\n  credits?: {\n    credits_total: number;\n    credits_remaining: number;\n  };\n  authProvider?: 'email' | 'telegram';\n  telegramId?: string;\n  username?: string;\n  photoUrl?: string;\n}\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  email: string;\n  password: string;\n  fullName: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  session?: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000/api/v1';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadUserFromStorage();\n  }\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/login`, credentials)\n      .pipe(\n        tap(response => {\n          this.setUser(response.user);\n          if (response.session) {\n            localStorage.setItem('access_token', response.session.access_token);\n            localStorage.setItem('refresh_token', response.session.refresh_token);\n          }\n        })\n      );\n  }\n\n  register(userData: RegisterRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/auth/register`, userData)\n      .pipe(\n        tap(response => {\n          this.setUser(response.user);\n        })\n      );\n  }\n\n  logout(): Observable<any> {\n    return this.http.post(`${this.apiUrl}/auth/logout`, {})\n      .pipe(\n        tap(() => {\n          this.clearUser();\n        })\n      );\n  }\n\n  getProfile(): Observable<{ user: User }> {\n    return this.http.get<{ user: User }>(`${this.apiUrl}/auth/me`)\n      .pipe(\n        tap(response => {\n          this.setUser(response.user);\n        })\n      );\n  }\n\n  updateEmail(email: string, password: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/auth/update-email`, {\n      email,\n      password\n    });\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getCurrentUser();\n  }\n\n  setCurrentUser(user: User): void {\n    this.setUser(user);\n  }\n\n  private setUser(user: User): void {\n    this.currentUserSubject.next(user);\n    localStorage.setItem('current_user', JSON.stringify(user));\n  }\n\n  private clearUser(): void {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('current_user');\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  private loadUserFromStorage(): void {\n    const userStr = localStorage.getItem('current_user');\n    if (userStr) {\n      try {\n        const user = JSON.parse(userStr);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        console.error('Error loading user from storage:', error);\n        this.clearUser();\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}