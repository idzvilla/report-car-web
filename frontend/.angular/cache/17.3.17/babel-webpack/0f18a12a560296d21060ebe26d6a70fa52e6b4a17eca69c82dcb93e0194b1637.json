{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/common\";\nfunction TelegramSuccessComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"div\", 11);\n    i0.ɵɵelementStart(2, \"p\", 12);\n    i0.ɵɵtext(3, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u0435\\u043C \\u0432\\u0430\\u0448 \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044C...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TelegramSuccessComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"p\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nexport class TelegramSuccessComponent {\n  constructor(route, router, authService) {\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.isLoading = true;\n    this.error = '';\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      const token = params['token'];\n      if (token) {\n        this.handleTelegramAuth(token);\n      } else {\n        this.error = 'Токен авторизации не найден';\n        this.isLoading = false;\n      }\n    });\n  }\n  handleTelegramAuth(token) {\n    try {\n      // Сохраняем токен в localStorage\n      localStorage.setItem('auth_token', token);\n      // Декодируем JWT токен для получения данных пользователя\n      const payload = this.parseJwt(token);\n      // Обновляем состояние авторизации\n      this.authService.setCurrentUser({\n        id: payload.sub,\n        email: payload.email,\n        fullName: payload.fullName,\n        authProvider: payload.authProvider,\n        telegramId: payload.telegramId\n      });\n      this.isLoading = false;\n      // Перенаправляем на главную страницу через 2 секунды\n      setTimeout(() => {\n        this.router.navigate(['/']);\n      }, 2000);\n    } catch (error) {\n      console.error('Error handling Telegram auth:', error);\n      this.error = 'Ошибка при обработке авторизации';\n      this.isLoading = false;\n    }\n  }\n  parseJwt(token) {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      throw new Error('Invalid JWT token');\n    }\n  }\n  static {\n    this.ɵfac = function TelegramSuccessComponent_Factory(t) {\n      return new (t || TelegramSuccessComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TelegramSuccessComponent,\n      selectors: [[\"app-telegram-success\"]],\n      decls: 12,\n      vars: 2,\n      consts: [[1, \"min-h-screen\", \"bg-gray-50\", \"flex\", \"items-center\", \"justify-center\"], [1, \"max-w-md\", \"w-full\", \"space-y-8\"], [1, \"text-center\"], [1, \"mx-auto\", \"h-12\", \"w-12\", \"text-green-600\"], [\"fill\", \"none\", \"stroke\", \"currentColor\", \"viewBox\", \"0 0 24 24\"], [\"stroke-linecap\", \"round\", \"stroke-linejoin\", \"round\", \"stroke-width\", \"2\", \"d\", \"M5 13l4 4L19 7\"], [1, \"mt-6\", \"text-3xl\", \"font-extrabold\", \"text-gray-900\"], [1, \"mt-2\", \"text-sm\", \"text-gray-600\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [\"class\", \"mt-4 p-4 bg-red-50 rounded-lg\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"loading-spinner\", \"mx-auto\"], [1, \"text-sm\", \"text-gray-500\", \"mt-2\"], [1, \"mt-4\", \"p-4\", \"bg-red-50\", \"rounded-lg\"], [1, \"text-sm\", \"text-red-600\"]],\n      template: function TelegramSuccessComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(4, \"svg\", 4);\n          i0.ɵɵelement(5, \"path\", 5);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceHTML();\n          i0.ɵɵelementStart(6, \"h2\", 6);\n          i0.ɵɵtext(7, \" \\u0423\\u0441\\u043F\\u0435\\u0448\\u043D\\u0430\\u044F \\u0430\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F! \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"p\", 7);\n          i0.ɵɵtext(9, \" \\u0412\\u044B \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0432\\u043E\\u0448\\u043B\\u0438 \\u0447\\u0435\\u0440\\u0435\\u0437 Telegram \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(10, TelegramSuccessComponent_div_10_Template, 4, 0, \"div\", 8)(11, TelegramSuccessComponent_div_11_Template, 3, 1, \"div\", 9);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.error);\n        }\n      },\n      dependencies: [i3.NgIf],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","error","TelegramSuccessComponent","constructor","route","router","authService","isLoading","ngOnInit","queryParams","subscribe","params","token","handleTelegramAuth","localStorage","setItem","payload","parseJwt","setCurrentUser","id","sub","email","fullName","authProvider","telegramId","setTimeout","navigate","console","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","Error","ɵɵdirectiveInject","i1","ActivatedRoute","Router","i2","AuthService","selectors","decls","vars","consts","template","TelegramSuccessComponent_Template","rf","ctx","ɵɵtemplate","TelegramSuccessComponent_div_10_Template","TelegramSuccessComponent_div_11_Template","ɵɵproperty"],"sources":["/Users/test/Documents/Apps/CarFax Web/frontend/src/app/pages/telegram-success/telegram-success.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-telegram-success',\n  template: `\n    <div class=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n      <div class=\"max-w-md w-full space-y-8\">\n        <div class=\"text-center\">\n          <div class=\"mx-auto h-12 w-12 text-green-600\">\n            <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n            </svg>\n          </div>\n          <h2 class=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            Успешная авторизация!\n          </h2>\n          <p class=\"mt-2 text-sm text-gray-600\">\n            Вы успешно вошли через Telegram\n          </p>\n          <div *ngIf=\"isLoading\" class=\"mt-4\">\n            <div class=\"loading-spinner mx-auto\"></div>\n            <p class=\"text-sm text-gray-500 mt-2\">Загружаем ваш профиль...</p>\n          </div>\n          <div *ngIf=\"error\" class=\"mt-4 p-4 bg-red-50 rounded-lg\">\n            <p class=\"text-sm text-red-600\">{{ error }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: []\n})\nexport class TelegramSuccessComponent implements OnInit {\n  isLoading = true;\n  error = '';\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      const token = params['token'];\n      \n      if (token) {\n        this.handleTelegramAuth(token);\n      } else {\n        this.error = 'Токен авторизации не найден';\n        this.isLoading = false;\n      }\n    });\n  }\n\n  private handleTelegramAuth(token: string): void {\n    try {\n      // Сохраняем токен в localStorage\n      localStorage.setItem('auth_token', token);\n      \n      // Декодируем JWT токен для получения данных пользователя\n      const payload = this.parseJwt(token);\n      \n      // Обновляем состояние авторизации\n      this.authService.setCurrentUser({\n        id: payload.sub,\n        email: payload.email,\n        fullName: payload.fullName,\n        authProvider: payload.authProvider,\n        telegramId: payload.telegramId\n      });\n\n      this.isLoading = false;\n      \n      // Перенаправляем на главную страницу через 2 секунды\n      setTimeout(() => {\n        this.router.navigate(['/']);\n      }, 2000);\n      \n    } catch (error) {\n      console.error('Error handling Telegram auth:', error);\n      this.error = 'Ошибка при обработке авторизации';\n      this.isLoading = false;\n    }\n  }\n\n  private parseJwt(token: string): any {\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      throw new Error('Invalid JWT token');\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}