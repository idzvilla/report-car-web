import { SupabaseClient } from '@supabase/supabase-js';

export class ReportProcessor {
  constructor(private supabase: SupabaseClient) {}

  async handleCompletedReport(reportId: string, userId: string) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è bulk –ø–∞–∫–µ—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è credits
      const { data: userCredits, error: creditsError } = await this.supabase
        .from('user_credits')
        .select('credits_remaining')
        .eq('user_id', userId)
        .gt('credits_remaining', 0)
        .single();

      if (creditsError && creditsError.code !== 'PGRST116') {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ credits:', creditsError);
        return;
      }

      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å credits, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω
      if (userCredits && userCredits.credits_remaining > 0) {
        await this.useCredit(userId, userCredits.credits_remaining);
        console.log(`üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω credit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      } else {
        console.log(`üí∞ –û—Ç—á—ë—Ç ${reportId} –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:', error);
    }
  }

  private async useCredit(userId: string, currentCredits: number) {
    try {
      const { error } = await this.supabase
        .from('user_credits')
        .update({ 
          credits_remaining: currentCredits - 1,
          updated_at: new Date().toISOString(),
        })
        .eq('user_id', userId);

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è credits: ${error.message}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è credit:', error);
      throw error;
    }
  }
}
