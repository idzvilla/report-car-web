import { SupabaseClient } from '@supabase/supabase-js';
import * as PDFDocument from 'pdfkit';
import { v4 as uuidv4 } from 'uuid';

export interface VinReportData {
  vin: string;
  make: string;
  model: string;
  year: number;
  color: string;
  mileage: number;
  accidents: number;
  owners: number;
  serviceHistory: string[];
  recalls: string[];
  marketValue: number;
  generatedAt: Date;
}

export class PDFGenerator {
  constructor(private supabase: SupabaseClient) {}

  async generateVinReport(data: VinReportData): Promise<string> {
    const doc = new PDFDocument({
      size: 'A4',
      margin: 50,
    });

    // Создаем буфер для PDF
    const chunks: Buffer[] = [];
    doc.on('data', (chunk) => chunks.push(chunk));
    
    return new Promise((resolve, reject) => {
      doc.on('end', async () => {
        try {
          const pdfBuffer = Buffer.concat(chunks);
          const fileName = `vin-report-${data.vin}-${uuidv4()}.pdf`;
          
          // Загружаем в Supabase Storage
          const { data: uploadData, error } = await this.supabase
            .storage
            .from(process.env.PDF_STORAGE_BUCKET || 'reports-pdfs')
            .upload(fileName, pdfBuffer, {
              contentType: 'application/pdf',
              upsert: false,
            });

          if (error) {
            reject(error);
            return;
          }

          resolve(fileName);
        } catch (error) {
          reject(error);
        }
      });

      doc.on('error', reject);

      // Генерируем содержимое PDF
      this.generateReportContent(doc, data);
      doc.end();
    });
  }

  private generateReportContent(doc: PDFDocument, data: VinReportData) {
    // Заголовок
    doc.fontSize(24)
       .fillColor('#2563eb')
       .text('CarFax Vehicle Report', 50, 50);

    doc.fontSize(12)
       .fillColor('#6b7280')
       .text(`Generated: ${data.generatedAt.toLocaleDateString()}`, 50, 90);

    // VIN информация
    doc.fontSize(16)
       .fillColor('#000')
       .text('Vehicle Information', 50, 130);

    doc.fontSize(12)
       .text(`VIN: ${data.vin}`, 50, 160)
       .text(`Make: ${data.make}`, 50, 180)
       .text(`Model: ${data.model}`, 50, 200)
       .text(`Year: ${data.year}`, 50, 220)
       .text(`Color: ${data.color}`, 50, 240)
       .text(`Mileage: ${data.mileage.toLocaleString()} miles`, 50, 260);

    // История
    doc.fontSize(16)
       .text('Vehicle History', 50, 300);

    doc.fontSize(12)
       .text(`Accidents: ${data.accidents}`, 50, 330)
       .text(`Previous Owners: ${data.owners}`, 50, 350);

    // Сервисная история
    if (data.serviceHistory.length > 0) {
      doc.fontSize(14)
         .text('Service History', 50, 380);

      data.serviceHistory.forEach((service, index) => {
        doc.fontSize(10)
           .text(`• ${service}`, 70, 410 + (index * 20));
      });
    }

    // Отзывы
    if (data.recalls.length > 0) {
      doc.fontSize(14)
         .text('Recalls', 50, 500);

      data.recalls.forEach((recall, index) => {
        doc.fontSize(10)
           .text(`• ${recall}`, 70, 530 + (index * 20));
      });
    }

    // Рыночная стоимость
    doc.fontSize(16)
       .text('Market Value', 50, 600);

    doc.fontSize(12)
       .text(`Estimated Value: $${data.marketValue.toLocaleString()}`, 50, 630);

    // Подвал
    doc.fontSize(10)
       .fillColor('#6b7280')
       .text('This report was generated by CarFax Web Service', 50, 750, {
         align: 'center',
       });
  }

  async getSignedUrl(fileName: string): Promise<string> {
    const { data, error } = await this.supabase
      .storage
      .from(process.env.PDF_STORAGE_BUCKET || 'reports-pdfs')
      .createSignedUrl(fileName, 3600); // 1 час

    if (error) {
      throw new Error(`Failed to create signed URL: ${error.message}`);
    }

    return data.signedUrl;
  }
}
