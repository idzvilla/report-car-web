import { createClient } from '@supabase/supabase-js';
import { PDFGenerator } from './pdf-generator';
import { ReportProcessor } from './report-processor';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class PDFWorker {
  private supabase;
  private pdfGenerator: PDFGenerator;
  private reportProcessor: ReportProcessor;
  private isRunning = false;

  constructor() {
    this.supabase = createClient(
      process.env.SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    );

    this.pdfGenerator = new PDFGenerator(this.supabase);
    this.reportProcessor = new ReportProcessor(this.supabase);
  }

  async start() {
    console.log('üöÄ PDF Worker –∑–∞–ø—É—â–µ–Ω');
    this.isRunning = true;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
      if (this.isRunning) {
        await this.processPendingReports();
      }
    }, 30000);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await this.processPendingReports();
  }

  async stop() {
    console.log('üõë PDF Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    this.isRunning = false;
  }

  private async processPendingReports() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'
      const { data: reports, error } = await this.supabase
        .from('reports')
        .select('*')
        .eq('status', 'pending')
        .limit(10);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤:', error);
        return;
      }

      if (!reports || reports.length === 0) {
        console.log('üìã –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
      }

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${reports.length} –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ç—á—ë—Ç
      for (const report of reports) {
        await this.processReport(report);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á—ë—Ç–æ–≤:', error);
    }
  }

  private async processReport(report: any) {
    try {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞ ${report.id} –¥–ª—è VIN ${report.vin}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'generating'
      await this.supabase
        .from('reports')
        .update({ status: 'generating' })
        .eq('id', report.id);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
      const pdfFileName = await this.pdfGenerator.generateVinReport({
        vin: report.vin,
        make: 'Toyota',
        model: 'Camry',
        year: 2020,
        color: 'Silver',
        mileage: 45000,
        accidents: 0,
        owners: 1,
        serviceHistory: [
          'Oil change - 10,000 miles',
          'Brake inspection - 25,000 miles',
          'Tire rotation - 35,000 miles',
        ],
        recalls: [],
        marketValue: 25000,
        generatedAt: new Date(),
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á—ë—Ç —Å –∏–º–µ–Ω–µ–º PDF —Ñ–∞–π–ª–∞
      const { error: updateError } = await this.supabase
        .from('reports')
        .update({
          status: 'completed',
          pdf_file_name: pdfFileName,
          generated_at: new Date().toISOString(),
        })
        .eq('id', report.id);

      if (updateError) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: ${updateError.message}`);
      }

      console.log(`‚úÖ –û—Ç—á—ë—Ç ${report.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å credit
      await this.reportProcessor.handleCompletedReport(report.id, report.user_id);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á—ë—Ç–∞ ${report.id}:`, error);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'error'
      await this.supabase
        .from('reports')
        .update({ status: 'error' })
        .eq('id', report.id);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT');
  await worker.stop();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM');
  await worker.stop();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ worker
const worker = new PDFWorker();
worker.start().catch(console.error);
